plugins {
    id 'java'
    id 'eclipse'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
    id("xyz.jpenilla.run-velocity") version "2.3.1"
}

group = 'com.veroud'
version = '1.0-SNAPSHOT'


def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

ext {
    minecraftVersion = '1.21.8'
    gitHash = getGitHash()
}

repositories {
    mavenCentral()
    maven {
        name = "papermc"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    compileOnly("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")
    annotationProcessor("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")
    implementation 'org.yaml:snakeyaml:2.2'
    compileOnly 'javax.inject:javax.inject:1'
}

tasks {
    runVelocity {
        // Configure the Velocity version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        velocityVersion("3.4.0-SNAPSHOT")
    }
}

def targetJavaVersion = 21

java {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(targetJavaVersion)
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = ['version': project.version]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

project.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)

// Task to collect this plugin's own built jar into build/libs (usually redundant because it's already there, but keeping your pattern)
tasks.register('collect', Copy) {
    from tasks.jar.outputs.files
    into file('build/libs')
}

def gitBranch() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

// Example custom upload task (you must implement UploadFilesTask or replace with your own logic)
tasks.register('uploadFiles', UploadFilesTask) {
    version.set "${project.version}-${project.ext.gitHash}" // same here
    snapshot.set project.version.toString().endsWith("-SNAPSHOT")
    gitHash.set project.ext.gitHash
    branch.set gitBranch() // you must implement gitBranch() or define it
    inputs.files(tasks.collect.get().outputs.files)
    dependsOn(tasks.collect)
}